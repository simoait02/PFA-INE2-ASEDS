pipeline {
   agent any
   triggers {
      pollSCM('*/1 * * * *')
   }
   environment{
          DOCKER_IMAGE = 'channels'
          DOCKER_TAG = "${env.BUILD_NUMBER}"
          DOCKER_REPO = 'killerquen69'

   }
   stages {
      /*stage('build stage') {
      when {
         changeset "channels-microservice/**"
      }
        agent{
          docker {
             image 'gradle:8.14.0-jdk17'
          }
        }
        steps {
           dir('channels-microservice') {
               sh 'gradle build -x test'
           }
        }
      }
      stage ('sca ') {
         when {
             changeset "channels-microservice/**"
         }
         steps {
            dir('channels-microservice') {
               dependencyCheck additionalArguments: '--format HTML', nvdCredentialsId: 'owasp', odcInstallation: 'DP-Check'
            }
         }
      }

      stage('sast') {
         when {
            changeset "channels-microservice/**"
         }
         agent {
            docker {
               image 'gradle:8.14.0-jdk17'
               args '''
                    --network jenkins
                    --entrypoint=""
                    --user root
                    -v /var/run/docker.sock:/var/run/docker.sock
                    '''
            }
         }
         steps{
            dir('channels-microservice') {
                 withSonarQubeEnv( installationName: 'sq1') {
                                 sh '''
                                    gradle test jacocoTestReport sonar \
                                           -Dsonar.projectKey=jenkins \
                                           -Dsonar.projectName='jenkins'
                                    '''
                 }
            }
         }
      }

      stage('package stage') {
        when {
           changeset "channels-microservice/**"
        }
        agent {
          docker {
             image 'docker:24.0-cli'
             args '--entrypoint="" --user root -v /var/run/docker.sock:/var/run/docker.sock'
          }
        }
        steps{
           dir('channels-microservice') {
              sh 'docker build -t $DOCKER_REPO/$DOCKER_IMAGE:31 .'
           }

        }
      }
      stage('scan stage') {
         when {
            changeset "channels-microservice/**"
         }
         agent {
            docker {
              image 'aquasec/trivy'
              args '--entrypoint="" --user root -v /var/run/docker.sock:/var/run/docker.sock'
            }
         }
         steps {
            dir('channels-microservice') {
                sh 'trivy image --no-progress --severity HIGH,CRITICAL --skip-files "*.jar" --timeout 20m $DOCKER_REPO/$DOCKER_IMAGE:$DOCKER_TAG'
            }
         }
      }
      stage('push stage') {
         when {
            changeset "channels-microservice/**"
         }
         agent {
            docker {
               image 'docker:24.0-cli'
               args '--entrypoint="" --user root -v /var/run/docker.sock:/var/run/docker.sock'
            }
         }
         steps {
             dir('channels-microservice') {

                withCredentials([usernamePassword(credentialsId: 'killerquen69', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh '''
                       echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin

                       docker push $DOCKER_USERNAME/$DOCKER_IMAGE:31
                       '''
                }

             }

         }

      }*/
      stage ('deployment stage') {
          when {
             changeset "channels-microservice/**"
          }
          steps {


                withCredentials([usernamePassword(credentialsId: 'github', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {

                          sh '''
                             git config --global user.email "hamza.elmalki1234@gmail.com"
                             git config --global user.name "Hamzacherkaouiel"
                             git config --global pull.rebase false
                             git checkout master
                             git pull origin master

                             cd k8s
                             sed -i "s|image: $DOCKER_REPO/$DOCKER_IMAGE:[^ ]*|image: $DOCKER_REPO/$DOCKER_IMAGE:31|g" channels-microservice-deployment.yaml
                             cat channels-microservice-deployment.yaml
                             git add .
                             git commit -m "update manifest"
                             git remote set-url origin https://$GIT_USERNAME:$GIT_PASSWORD@github.com/Hamzacherkaouiel/PFA-INE2-ASEDS.git
                             git push -u origin master
                             '''
                }



          }

      }
   }
}